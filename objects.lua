local Class = require "class"
local Vector = require "vector"

local function pack(...)
	return { n = select("#", ...), ... }
end

local function makePolygonTable(object)
	local list = pack(object.body:getWorldPoints(object.shape:getPoints()))
	local polygon = {}
	for i=1,#list/2 do
		polygon[i] = {list[i*2-1],list[i*2],list[i*2-1]/object.drawing.texture:getWidth(),list[i*2]/object.drawing.texture:getHeight()}
	end
	return polygon
end

local Object = Class:derive("Object")

function Object:new(args)
	self.drawing = args.drawing
	self.body = love.physics.newBody(world,args.position[1],args.position[2],args.bodyType)
	if args.shape.type == "rectangle" then
		self.shape = love.physics.newRectangleShape(args.shape.size[1],args.shape.size[2])
		self.size = args.shape.size --width and height
		self.position = args.position:take(Vector(self.size[1]/2,self.size[2]/2))--top left hand corner
	end
	if args.shape.type == "circle" then
		self.shape = love.physics.newCircleShape(args.shape.radius)
	end
	self.fixture = love.physics.newFixture(self.body,self.shape,args.density)

	self:createMesh()
end

function Object:createMesh()
	self.drawing.mesh = love.graphics.newMesh(makePolygonTable(self),"fan","dynamic")
	self.drawing.texture:setWrap("repeat","repeat")
	self.drawing.mesh:setTexture(self.drawing.texture)
end

function Object:draw()
	if self.drawing.type == "textured" and self.shape:getType() == "polygon" then
		self:createMesh()
		love.graphics.setColor(1,1,1)
		love.graphics.draw(self.drawing.mesh)
	else
		love.graphics.setColor(0.20, 0.20, 0.20)
		love.graphics.polygon("fill", self.body:getWorldPoints(self.shape:getPoints()))
	end
end

----------------------

local objects = {}

function objects.load()
    love.physics.setMeter(64) --the length of a meter our worlds will be 64px
    world = love.physics.newWorld(0, 9.81*64, true) --create a world for the bodies to exist in with horizontal gravity of 0 and vertical gravity of 9.81
end

function objects.add(args)
	objects[#objects+1] = Object(args)
end

function objects.update(dt)
    if inGame == true and inGameMenu == false then
        world:update(dt)
    
        --here we are going to create some keyboard events
        if love.keyboard.isDown("d") then --press the d key to push the ball to the right
            objects.ball.body:applyForce(400, 0)
        elseif love.keyboard.isDown("a") then --press the a key to push the ball to the left
            objects.ball.body:applyForce(-400, 0)
        elseif love.keyboard.isDown("space") then --press the space key to set the ball in the air
            objects.ball.body:setPosition(650/2, 650/2)
            objects.ball.body:setLinearVelocity(0, 0) --we must set the velocity to zero to prevent a potentially large velocity generated by the change in position
        end
    end
end

function objects.draw()
	if inGame == true then
		for i=1,#objects do
			objects[i]:draw()
		end
	end
end

return objects